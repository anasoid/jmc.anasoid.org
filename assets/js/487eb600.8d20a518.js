(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[166],{3905:function(e,t,r){"use strict";r.d(t,{Zo:function(){return d},kt:function(){return c}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=p(r),c=a,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||l;return r?n.createElement(k,i(i({ref:t},d),{},{components:r})):n.createElement(k,i({ref:t},d))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,i=new Array(l);i[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var p=2;p<l;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},6874:function(e,t,r){"use strict";r.r(t),r.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var n=r(2122),a=r(9756),l=(r(7294),r(3905)),i=["components"],o={sidebar_position:10},s={unversionedId:"users/Wrapper",id:"users/Wrapper",isDocsHomePage:!1,title:"Wrapper",description:"TestElement use Lombok to generate POJO with Builder.",source:"@site/docs/users/Wrapper.md",sourceDirName:"users",slug:"/users/Wrapper",permalink:"/docs/users/Wrapper",editUrl:"https://github.com/anasoid/jmc.anasoid.org/edit/master/website/docs/users/Wrapper.md",version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"users",previous:{title:"Get Started",permalink:"/docs/users/intro"},next:{title:"Application",permalink:"/docs/users/application"}},p=[{value:"Node types",id:"node-types",children:[]},{value:"Builder",id:"builder-1",children:[]},{value:"Simple Attribute",id:"simple-attribute",children:[]},{value:"Collections Attribute",id:"collections-attribute",children:[]},{value:"Simplified add*",id:"simplified-add",children:[]},{value:"Attributes",id:"attributes",children:[{value:"Children",id:"children",children:[]},{value:"Tags",id:"tags",children:[]}]}],d={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"TestElement use ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"https://projectlombok.org"},"Lombok"))," to generate POJO with Builder."),(0,l.kt)("p",null,"Each test element use the same name of the origin test element but with suffix Wrapper."),(0,l.kt)("p",null,"Wrapper can be instantiated directly but it's recommended to use builder."),(0,l.kt)("h2",{id:"node-types"},(0,l.kt)("a",{parentName:"h2",href:"/docs/reference/jmeter/jmeter-component"},"Node types")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Test Plan")," : Test Plan has the wrapper ",(0,l.kt)("strong",{parentName:"li"},"TestPlanWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Thread Group")," : All Thread group implements interface ",(0,l.kt)("strong",{parentName:"li"},"ThreadWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Samplers")," : All samplers implements interface ",(0,l.kt)("strong",{parentName:"li"},"SamplerWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Logic Controllers")," : All controller implements interface ",(0,l.kt)("strong",{parentName:"li"},"ControllerWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Listeners")," : All listeners implements interface ",(0,l.kt)("strong",{parentName:"li"},"SampleListenerWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Configuration Elements")," : All configuration elements implements interface ",(0,l.kt)("strong",{parentName:"li"},"ConfigElementWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Assertions")," : All Assertions implements interface ",(0,l.kt)("strong",{parentName:"li"},"AssertionWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Timers")," : All timers implements interface ",(0,l.kt)("strong",{parentName:"li"},"timers"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Pre-Processors")," :All Pre-Processors implements interface ",(0,l.kt)("strong",{parentName:"li"},"PreProcessorWrapper"),"."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Post-Processors")," : All Post-Processors implements interface ",(0,l.kt)("strong",{parentName:"li"},"PostProcessorWrapper"),".")),(0,l.kt)("h1",{id:"builder"},"Builder"),(0,l.kt)("p",null,"JMC is based on ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"https://projectlombok.org/features/experimental/SuperBuilder"},"Lombok SuperBuilder"))," to generate builder."),(0,l.kt)("h2",{id:"builder-1"},"Builder"),(0,l.kt)("p",null,"You can get the builder of component calling the static method builder() on type."),(0,l.kt)("h2",{id:"simple-attribute"},"Simple Attribute"),(0,l.kt)("p",null,"In builder all simple attribute has a prefix with","*","."),(0,l.kt)("h2",{id:"collections-attribute"},"Collections Attribute"),(0,l.kt)("p",null,"All list attributes has a prefix add","*",", to add values to the list value."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"add{Attributename}( ",(0,l.kt)("em",{parentName:"li"},"oneValue")," )"),(0,l.kt)("li",{parentName:"ol"},"add{Attributename}",(0,l.kt)("strong",{parentName:"li"},"s"),"( ",(0,l.kt)("em",{parentName:"li"},"listValue")," )")),(0,l.kt)("h2",{id:"simplified-add"},"Simplified add","*"),(0,l.kt)("p",null,"For same simple object a simplified add method is present, for example : argument composed by (key, value) we an found the following method ",(0,l.kt)("strong",{parentName:"p"},"addArgument( String")," key,",(0,l.kt)("strong",{parentName:"p"},"String")," value ",(0,l.kt)("strong",{parentName:"p"},")")),(0,l.kt)("h2",{id:"attributes"},"Attributes"),(0,l.kt)("h3",{id:"children"},"Children"),(0,l.kt)("p",null,"Children attribute contain the list of children of testElement they are equivalent the children nodes in GUI.\naddChild/addChildren are not available but depends of node type the correct method is available :"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Methods"),(0,l.kt)("th",{parentName:"tr",align:null},"Available for"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addThread/addThreads"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addController/addController"),(0,l.kt)("td",{parentName:"tr",align:null},"Thread/Controller")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addSampler/addSampler"),(0,l.kt)("td",{parentName:"tr",align:null},"Thread/Controller")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addConfig/addConfigs"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addPreProcessor/addPreProcessors"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addPostProcessor/addPostProcessors"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addTimer/addTimers"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addListener/addListeners"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addPostProcessor/addPostProcessors"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addTimer/addTimers"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"addAssertion/addAssertions"),(0,l.kt)("td",{parentName:"tr",align:null},"TestPlan/Thread/Controller/Sampler")))),(0,l.kt)("h3",{id:"tags"},"Tags"),(0,l.kt)("p",null,"Tags are string value that can be used to identify a testElement or group of testElements, they an be used with ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"/docs/users/Interceptor"},"interceptors"))))}m.isMDXComponent=!0}}]);