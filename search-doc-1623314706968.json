[{"title":"JMC properties","type":0,"sectionRef":"#","url":"docs/reference/intro","content":"JMC properties reference Properties\tModule\tDefault\tDescriptionjmc.data.root.folder\tJmeter Root data folder, all component reading csv data, will have this value as root folder. jmc.script.root.folder\tJmeter Root script folder, all JSR223 component will have this value as root folder jmc.result.root.folder\tJmeter Root result folder, all component that generate result (*.jtl) will have this value as root folder. jmc.script.resource\tJmeter\ttrue\tAttach script file as content, in JSR223 if true content of file will be add to componenet as contonent, else component will reference the path. jmc.data.resource\tJmeter\tfalse\tGet Data csv from resource, use only when executing from code source.","keywords":""},{"title":"Developers guide","type":0,"sectionRef":"#","url":"docs/developers/intro","content":"Under construction.","keywords":""},{"title":"Jmeter functions","type":0,"sectionRef":"#","url":"docs/reference/jmeter/jmeter-functions","content":"","keywords":""},{"title":"Function List","type":1,"pageTitle":"Jmeter functions","url":"docs/reference/jmeter/jmeter-functions#function-list","content":"Type\tName\tCovered\tOnly JMC\tDescriptionInformation\tthreadNum\t✅ get thread number Information\tthreadGroupName\t✅ get thread group name Information\tsamplerName\t✅ get the sampler name (label) Information\tmachineIP\t✅ get the local machine IP address Information\tmachineName\t✅ get the local machine name Information\ttime\t✅ return current time in various formats Information\ttimeShift\t✅ return a date in various formats with the specified amount of seconds/minutes/hours/days added Information\tlog\t✅ log (or display) a message (and return the value) Information\tlogn\t✅ log (or display) a message (empty return value) Input\tStringFromFile\t❌ read a line from a file Input\tFileToString\t❌ read an entire file Input\tCSVRead\t❌ read from CSV delimited file Input\tXPath\t❌ Use an XPath expression to read from a file Input\tStringToFile\t❌ write a string to a file Calculation\tcounter\t✅ generate an incrementing number Formatting\tdateTimeConvert\t❌ Convert a date or time from source to target format Calculation\tdigest\t❌ Generate a digest (SHA-1, SHA-256, MD5...) Calculation\tintSum\t❌ add int numbers Calculation\tlongSum\t❌ add long numbers Calculation\tRandom\t✅ generate a random lowercase alpha value (based on RandomString ) Calculation\trandomAlpha\t✅\t✅\tgenerate a random lowercase alpha numeric value (based on RandomString ) Calculation\trandomAlphaNumeric\t✅\t✅\tgenerate a random number Calculation\tRandomDate\t✅ generate random date within a specific date range Calculation\tRandomFromMultipleVars\t❌ extracts an element from the values of a set of Variables separated by | Calculation\tRandomString\t✅ generate a random string Calculation\tUUID\t✅ generate a random type 4 UUID Scripting\tgroovy\t✅ run an Apache Groovy script Scripting\tBeanShell\tnever run a BeanShell script Scripting\tjavaScript\t✅ process JavaScript (Nashorn) Scripting\tjexl2\t✅ evaluate a Commons Jexl2 expression Scripting\tjexl3\t✅ evaluate a Commons Jexl3 expression Properties\tisPropDefined\t✅ Test if a property exists Properties\tproperty\t✅ read a property Properties\tP\tnever read a property (shorthand method) Properties\tsetProperty\t✅ set a JMeter property Variables\tsplit\t❌ Split a string into Variables Variables\teval\t✅ evaluate a variable expression Variables\tevalVar\t✅ evaluate an expression stored in a variable Properties\tisVarDefined\t✅ Test if a variable exists Variables\tV\t❌ evaluate a variable name String\tchar\t❌ generate Unicode char values from a list of numbers String\tchangeCase\t❌ Change case following different modes String\tescapeHtml\t❌ Encode strings using HTML encoding String\tescapeOroRegexpChars\t❌ quote meta chars used by ORO regular expression String\tescapeXml\t❌ Encode strings using XMl encoding String\tregexFunction\t❌ parse previous response using a regular expression String\tunescape\t❌ Process strings containing Java escapes (e.g. \\n & \\t) String\tunescapeHtml\t❌ Decode HTML-encoded strings String\turldecode\t❌ Decode a application/x-www-form-urlencoded string String\turlencode\t❌ Encode a string to a application/x-www-form-urlencoded string String\tTestPlanName\t✅ Return name of current test plan "},{"title":"Tutorial Intro","type":0,"sectionRef":"#","url":"docs/tuto/intro","content":"","keywords":""},{"title":"Getting Started","type":1,"pageTitle":"Tutorial Intro","url":"docs/tuto/intro#getting-started","content":"Get started by looking to JMC Example and Users guide. "},{"title":"Create a new project using Gradle (Or Maven).","type":1,"pageTitle":"Tutorial Intro","url":"docs/tuto/intro#create-a-new-project-using-gradle-or-maven","content":"Add a dependency to the last version of org.anasoid.jmc:jmc-core To access the snapshot version use snapshot repository. repositories { // Use JCenter for resolving dependencies. mavenCentral() maven { url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" } } Copy "},{"title":"Write your tests","type":1,"pageTitle":"Tutorial Intro","url":"docs/tuto/intro#write-your-tests","content":"Full support of Jmeter features, all nodes can add config, assertions, listeners, ... (Not all protocols are covered, but Http is 100% covered, and next protocol to be added will be JDBC). Tests can be executed as junit or main method. it's recommended to execute final tests with the command line from JMX. "},{"title":"Jmeter component","type":0,"sectionRef":"#","url":"docs/reference/jmeter/jmeter-component","content":"","keywords":""},{"title":"Thread Group","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#thread-group","content":"All Thread group implements interface ThreadWrapper. Component\tCovered\tClass\tDescriptionThread Group\t✅\tThreadGroupWrapper\tFull support setUp Thread Group\t✅\tSetupThreadGroupWrapper\tFull support tearDown Thread Group\t✅\tPostThreadGroupWrapper\tFull support "},{"title":"Samplers","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#samplers","content":"All samplers implements interface SamplerWrapper. Component\tcovered\tclass\tDescriptionFTP Request\t❌\t-\t- HTTP Request\t✅\tHTTPSamplerBaseWrapper\tFull support JDBC Request\t❌\t-\tRoadmap Java Request\t❌\t-\t- LDAP Request\t❌\t-\t- LDAP Extended Request\t❌\t-\t- Access Log Sampler\t❌\t-\t- BeanShell Sampler\tnever\t-\tDEPRECATED JSR223 Sampler\t✅\tJSR223SamplerWrapper\tFull support TCP Sampler\t❌\t-\t- JMS Publisher\t❌\t-\t- JMS Subscriber\t❌\t-\t- JMS Point-to-Point\t❌\t-\t- JUnit Request\t❌\t-\t- Mail Reader Sampler\t❌\t-\t- Flow Control Action\t❌\t-\t- SMTP Sampler\t❌\t-\t- OS Process Sampler\t❌\t-\t- MongoDB Script\tnever\t-\tDEPRECATED Bolt Request\t❌\t-\t- Debug sampler\t✅\tDebugSamplerWrapper\tFull support "},{"title":"Logic Controllers","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#logic-controllers","content":"All controller implements interface ControllerWrapper. Component\tcovered\tclass\tDescriptionSimple Controller\t✅\tSimpleControllerWrapper\tFull support Loop Controller\t✅\tLoopControllerWrapper\tFull support Once Only Controller\t✅\tOnceOnlyControllerWrapper\tFull support Interleave Controller\t✅\tInterleaveControlWrapper\tFull support Random Controller\t✅\tRandomControllerWrapper\tFull support Random Order Controller\t✅\tRandomOrderControllerWrapper\tFull support Throughput Controller\t✅\tThroughputControllerWrapper\tFull support Runtime Controller\t❌\tRuntimeControllerWrapper\tFull support If Controller\t✅\tIfControllerWrapper\tFull support While Controller\t✅\tWhileControllerWrapper\tFull support Switch Controller\t✅\tSwitchControllerWrapper\tFull support ForEach Controller\t✅\tForeachControllerWrapper\tFull support Module Controller\t❌\t-\t- Include Controller\t❌\t-\t- Transaction Controller\t✅\tTransactionControllerWrapper\tFull support Recording Controller\t✅\tRecordingControllerWrapper\tFull support Critical Section Controller\t✅\tCriticalSectionControllerWrapper\tFull support "},{"title":"Listeners","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#listeners","content":"All listeners implements interface SampleListenerWrapper. Component\tcovered\tclass\tDescriptionGraph Results\t✅\tGraphVisualizerWrapper\tFull support Assertion Results\t✅\tResultCollectorWrapper\tFull support View Results Tree\t✅\tViewResultsFullVisualizerWrapper\tFull support Aggregate Report\t✅\tAggregateReportWrapper\tFull support View Results in Table\t✅\tTableVisualizerWrapper\tFull support Simple Data Writer\t✅\tSimpleDataWriterWrapper\tFull support Aggregate Graph\t✅\tAggregateGraphWrapper\tFull support **Response Time Graph\t❌\t-\t- Mailer Visualizer\t❌\t-\t- BeanShell Listener\tnever\t-\tDEPRECATED Summary Report\t✅\tSummaryReportWrapper\tFull support Save Responses to a file\t✅\t-\tFull support JSR223 Listener\t✅\tJSR223ListenerWrapper\tFull support Generate Summary Results\t✅\tSummariserWrapper\tFull support Comparison Assertion Visualizer\t✅\tComparisonAssertionVisualizerWrapper\tFull support Backend Listener\t✅\tBackendListenerWrapper\tFull support "},{"title":"Configuration Elements","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#configuration-elements","content":"All configuration elements implements interface ConfigElementWrapper. Component\tcovered\tclass\tDescriptionCSV Data Set Config\t✅\tCSVDataSetWrapper\tFull support FTP Request Defaults\t❌\t-\t- DNS Cache Manager\t❌\t-\t- HTTP Authorization Manager\t✅\tAuthManagerWrapper\tFull support HTTP Cache Manager\t✅\tCacheManagerWrapper\tFull support HTTP Cookie Manager\t✅\tCookieManagerWrapper\tFull support HTTP Request Defaults\t✅\tHttpDefaultsWrapper\tFull support HTTP Header Manager\t✅\tHeaderManagerWrapper\tFull support Java Request Defaults\t❌\t-\t- JDBC Connection Configuration\t❌\t-\t- Keystore Configuration\t❌\t-\t- Login Config Element\t❌\t-\t- LDAP Request Defaults\t❌\t-\t- LDAP Extended Request Defaults\t❌\t-\t- TCP Sampler Config\t❌\t-\t- User Defined Variables\t✅\tArgumentsWrapper\tFull support Random Variable\t✅\tRandomVariableConfigWrapper\tFull support Counter\t✅\tCounterConfigWrapper\tFull support Simple Config Element\t❌\t-\t- MongoDB Source Config\tnever\t-\tDEPRECATED Bolt Connection Configuration\t❌\t-\t- "},{"title":"Assertions","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#assertions","content":"All Assertions implements interface AssertionWrapper. Component\tcovered\tclass\tDescriptionResponse Assertion\t✅\tResponseAssertionWrapper\tFull support Duration Assertion\t✅\tDurationAssertionWrapper\tFull support Size Assertion\t✅\tSizeAssertionWrapper\tFull support XML Assertion\t✅\tXMLAssertionWrapper\tFull support BeanShell Assertion\tnever\t-\tDEPRECATED MD5Hex Assertion\t✅\tMD5HexAssertionWrapper\tFull support HTML Assertion\t✅\tHTMLAssertionWrapper\tFull support XPath Assertion\t✅\tXPathAssertionWrapper\tFull support XPath2 Assertion\t✅\tXPath2AssertionWrapper\tFull support XML Schema Assertion\t✅\tXMLSchemaAssertionWrapper\tFull support JSR223 Assertion\t✅\tJSR223AssertionWrapper\tFull support Compare Assertion\t❌\t-\t- SMIME Assertion\t❌\t-\t- JSON Assertion\t✅\tJSONPathAssertionWrapper\tFull support JSON JMESPath Assertion\t✅\tJMESPathAssertionWrapper\tFull support "},{"title":"Timers","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#timers","content":"All timers implements interface timers. Component\tcovered\tclass\tDescriptionConstant Timer\t✅\tConstantTimerWrapper\tFull support Gaussian Random Timer\t✅\tGaussianRandomTimerWrapper\tFull support Uniform Random Timer\t✅\tUniformRandomTimerWrapper\tFull support Constant Throughput Timer\t✅\tConstantThroughputTimerWrapper\tFull support Precise Throughput Timer\t✅\tPreciseThroughputTimerWrapper\tFull support Synchronizing Timer\t✅\tSyncTimerWrapper\tFull support BeanShell Timer\tnever\t-\tDEPRECATED JSR223 Timer\t✅\tJSR223TimerWrapper\tFull support Poisson Random Timer\t✅\tPoissonRandomTimerWrapper\tFull support "},{"title":"Pre-Processors","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#pre-processors","content":"All Pre-Processors implements interface PreProcessorWrapper. Component\tcovered\tclass\tDescriptionHTML Link Parser\t✅\tAnchorModifierWrapper\tFull support HTTP URL Re-writing Modifier\t✅\tURLRewritingModifierWrapper\tFull support User Parameters\t✅\t-\tFull support BeanShell PreProcessor\tnever\t-\tDEPRECATED JSR223 PreProcessor\t✅\tJSR223PreProcessorWrapper\tFull support JDBC PreProcessor\t❌\t-\tRoadmap RegEx User Parameters\t✅\tRegExUserParametersWrapper\tFull support Sample Timeout\t✅\tSampleTimeoutWrapper\tFull support "},{"title":"Post-Processors","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#post-processors","content":"All Post-Processors implements interface PostProcessorWrapper. Component\tcovered\tclass\tDescriptionRegular Expression Extractor\t✅\tRegexExtractorWrapper\tFull support CSS Selector Extractor (was: CSS/JQuery Extractor )\t✅\tHtmlExtractorWrapper\tFull support XPath2 Extractor\t✅\tXPath2ExtractorWrapper\tFull support XPath Extractor\t✅\tXPathExtractorWrapper\tFull support JSON JMESPath Extractor\t✅\tJMESPathExtractorWrapper\tFull support Result Status Action Handler\t✅\tResultActionWrapper\tFull support BeanShell PostProcessor\tnever\t-\tDEPRECATED JSR223 PostProcessor\t✅\tJSR223PostProcessorWrapper\tFull support JDBC PostProcessor\t❌\t-\tFull support JSON Extractor\t✅\tJSON Extractor\tFull support Boundary Extractor\t✅\tBoundaryExtractorWrapper\tFull support Debug PostProcessor\t✅\tDebugPostProcessorWrapper\tFull support "},{"title":"Miscellaneous Features","type":1,"pageTitle":"Jmeter component","url":"docs/reference/jmeter/jmeter-component#miscellaneous-features","content":"Component\tcovered\tclass\tDescriptionTest Plan\t✅\tTestPlanWrapper\tFull support SSL Manager\t❌\t-\tFull support HTTP(S) Test Script Recorder (was: HTTP Proxy Server )\t❌\t-\tFull support HTTP Mirror Server\t❌\t-\tFull support Property Display\t❌\t-\tFull support Test Fragment\t❌\t-\tFull support "},{"title":"DSL (BETA)","type":0,"sectionRef":"#","url":"docs/users/dsl","content":"","keywords":""},{"title":"Example","type":1,"pageTitle":"DSL (BETA)","url":"docs/users/dsl#example","content":"HttpSamplerDsl.get(\"Home Page\", \"/\"); Copy Equivalent to: HTTPSamplerProxyWrapper.builder().withName(\"Home Page\").withPath(\"/\"); Copy "},{"title":"Application","type":0,"sectionRef":"#","url":"docs/users/application","content":"","keywords":""},{"title":"Big View on code:","type":1,"pageTitle":"Application","url":"docs/users/application#big-view-on-code","content":" /** * create application test. * * @param testPlanWrapper test plan. */ public ApplicationTest(TestPlanWrapper testPlanWrapper) { ... } /** * create application test. * * @param testPlanWrapper test plan. * @param prepareInterceptors interceptors. */ public ApplicationTest( TestPlanWrapper testPlanWrapper, List<PrepareInterceptor> prepareInterceptors) { . . . } /** * Generate Jmx file. * * @param out Destination output. * @throws IOException – If an I/O error occurs. */ public TestElementWrapper toJmx(Writer out) throws IOException { . . . } /** * Generate Jmx file. * * @param file Destination output. * @throws IOException – If an I/O error occurs. */ public TestElementWrapper toJmx(File file) throws IOException { . . . } /** * Execute test. * * @throws IOException – If an I/O error occurs. */ public void run() throws IOException { . . . } Copy "},{"title":"Functions","type":0,"sectionRef":"#","url":"docs/users/function","content":"","keywords":""},{"title":"Example","type":1,"pageTitle":"Functions","url":"docs/users/function#example","content":"JmeterFunctions.property(\"SERVER_PORT\", \"443\"); // return ${__property(SERVER_PORT,,443)} Copy "},{"title":"Interceptor","type":0,"sectionRef":"#","url":"docs/users/Interceptor","content":"","keywords":""},{"title":"Example","type":1,"pageTitle":"Interceptor","url":"docs/users/Interceptor#example","content":"Add a default wait for each sampler having a tag \"wait\" Ex public class WaitInterceptor implements PrepareInterceptor { @Override public boolean support(TestElementWrapper<?> testElementWrapper) { return testElementWrapper.getTags().contains(\"wait\")) && testElementWrapper instanceof HTTPSamplerProxyWrapper; } @Override public void prepare(TestElementWrapper<?> testElementWrapper) { HTTPSamplerProxyWrapper sampler = (HTTPSamplerProxyWrapper) testElementWrapper; sampler.getChilds().add( UniformRandomTimerWrapper.builder() .withName(\"Wait default\") .withDelay(0) .withRandom(20) .build()); } } Copy ApplicationTest accept a list of Interceptors.  ApplicationTest applicationTest = new ApplicationTest(new HelloTestPlan().generate(), Arrays.asList(new WaitInterceptor())); Copy "},{"title":"JMX Include","type":0,"sectionRef":"#","url":"docs/users/include","content":"","keywords":""},{"title":"Methods","type":1,"pageTitle":"JMX Include","url":"docs/users/include#methods","content":"Important Method to be used with JMX include are : withPath : give the resource path of JMX file.withParams : Input Map for parametrized file. "},{"title":"JMX File","type":1,"pageTitle":"JMX Include","url":"docs/users/include#jmx-file","content":"To have the JMX file you can save any node in Jmeter using the menu \"save as Test Fragment\". "},{"title":"Parameterized file.","type":1,"pageTitle":"JMX Include","url":"docs/users/include#parameterized-file","content":"You can replace any text in JMX fragment to be replaced dynamically by code. JMC parameter have the following format ${jmc.paramname}: EX : Chose parameter name : for example \"displayJMeterProperties\", in JMX file replace content by ${jmc.displayJMeterProperties} Ex: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <jmeterTestPlan version=\"1.2\" properties=\"5.0\" jmeter=\"5.4.1\"> <hashTree> <TestFragmentController guiclass=\"TestFragmentControllerGui\" testclass=\"TestFragmentController\" testname=\"Test Fragment\" enabled=\"false\"/> <hashTree> <DebugSampler guiclass=\"TestBeanGUI\" testclass=\"DebugSampler\" testname=\"Debug Sampler\" enabled=\"true\"> <boolProp name=\"displayJMeterProperties\">${jmc.displayJMeterProperties}</boolProp> <boolProp name=\"displayJMeterVariables\">true</boolProp> <boolProp name=\"displaySystemProperties\">false</boolProp> </DebugSampler> <hashTree/> </hashTree> </hashTree> </jmeterTestPlan> Copy Input parameters can be provided using withParams method, or with @JmcParam annotation when using subClass. "},{"title":"Two way are available to use JMX include.","type":1,"pageTitle":"JMX Include","url":"docs/users/include#two-way-are-available-to-use-jmx-include","content":""},{"title":"Using extends","type":1,"pageTitle":"JMX Include","url":"docs/users/include#using-extends","content":"Extends from the Class of your type and override method getDefaultPath to return the resource path of JMX file. Ex : @SuperBuilder(setterPrefix = \"with\", toBuilder = true) public class DebugSamplerJmxIncludeWrapperTesting extends SamplerJmxIncludeWrapper { private static final String PARENT_PATH = \"org/anasoid/jmc/core/wrapper/jmeter/jmc/generic\"; void DebugSamplerJmxIncludeWrapperTesting(boolean displayJMeterProperties){ this.displayJMeterProperties=displayJMeterProperties; } @JmcParam(\"displayJMeterProperties\") private static final Boolean displayJMeterProperties = false; @Override protected String getDefaultPath() { return \"org/myproject/jmx/include/debugsampler.jmx\"; } } Copy "},{"title":"Using Direct Class","type":1,"pageTitle":"JMX Include","url":"docs/users/include#using-direct-class","content":"To use direct Class you can use the class of your type and give the path of JMX file.  TestPlanWrapper testPlanWrapper = TestPlanWrapper.builder() .addThread( ThreadGroupWrapper.builder() .addSampler( SamplerJmxIncludeWrapper.builder() .withPath(\"org/myproject/jmx/include/debugsampler.jmx\") .withParams(Map.of(\"displayJMeterProperties\", \"true\")) .build()) .build()) .build(); Copy "},{"title":"Properties","type":0,"sectionRef":"#","url":"docs/users/properties","content":"JMC has it own properties files to manage properties for configuration see reference. important Class org.anasoid.jmc.core.config.JmcConfig give access to read property value. JMC read properties in order from the following inputs, last input can override values :# JMC resource file : Location org/anasoid/jmc/core/config/jmc.properties (Packaged with jmc-core.jar).User resource file : Each project can have it's own property file : \"jmc-user.properties\".User file : Each machine can have it's ow property file : \"{user.home}/jmc-user.properties\".System properties : properties can also be add via cls argument (-Dname=value).","keywords":""},{"title":"Get Started","type":0,"sectionRef":"#","url":"docs/users/intro","content":"","keywords":""},{"title":"Getting Started","type":1,"pageTitle":"Get Started","url":"docs/users/intro#getting-started","content":"Get started by looking to JMC Example. "},{"title":"Create new project using Gradle (Or Maven)","type":1,"pageTitle":"Get Started","url":"docs/users/intro#create-new-project-using-gradle-or-maven","content":"Add dependency to last version of org.anasoid.jmc:jmc-core "},{"title":"Dependency","type":1,"pageTitle":"Get Started","url":"docs/users/intro#dependency","content":"Add dependency to Lombok. //LOMBOCK compileOnly 'org.projectlombok:lombok:1.18.20' annotationProcessor 'org.projectlombok:lombok:1.18.20' Copy To access snapshot version use snapshot repository. repositories { // Use JCenter for resolving dependencies. mavenCentral() maven { url = \"https://s01.oss.sonatype.org/content/repositories/snapshots/\" } } Copy Last snapshot version is master-SNAPSHOT.  implementation 'org.anasoid.jmc:jmc-core:master-SNAPSHOT' Copy It's recommended to use last stable version. use last version implementation 'org.anasoid.jmc:jmc-core:' "},{"title":"Configuration","type":1,"pageTitle":"Get Started","url":"docs/users/intro#configuration","content":"To generate JMX file you don't need to have Jmeter installed, to execute Test with JMC you need Jmeter installed and the environnement variable JMETER_HOME to be configured. "},{"title":"Write your test","type":1,"pageTitle":"Get Started","url":"docs/users/intro#write-your-test","content":"Full support of Jmeter feature all node can be add config, assertion, listener, ... (Not all protocol are covered, but Http is 100% covered, next protocol to be add wil be JDBC). Test an be executed as junit or main method. it's recommended to execute final test with command line from JMX. "},{"title":"Reference","type":1,"pageTitle":"Get Started","url":"docs/users/intro#reference","content":"See reference of implemented component in Reference. "},{"title":"Variable","type":0,"sectionRef":"#","url":"docs/users/variable","content":"","keywords":""},{"title":"Usage","type":1,"pageTitle":"Variable","url":"docs/users/variable#usage","content":"Most component using variable in Jmeter accept Variable than string or only variable. Ex : Csv input Component accept list of variables and doesn't accept String with comma separator. "},{"title":"Template","type":0,"sectionRef":"#","url":"docs/users/template","content":"","keywords":""},{"title":"Example","type":1,"pageTitle":"Template","url":"docs/users/template#example","content":"Home Page is a simple template, we can use it whn needed with calling constructor (new HomePageTemplate()) public class HomePageTemplate extends AbstractJmcTemplate< HTTPSamplerProxyWrapper, HTTPSamplerProxyWrapper.HTTPSamplerProxyWrapperBuilder> { @Override protected JmcWrapperBuilder<?> init() { return HTTPSamplerProxyWrapper.builder().withPath(\"/\"); } } Copy Contact us is Http Sampler with email as input. public class ContactUsPageTemplate extends AbstractJmcTemplate< HTTPSamplerProxyWrapper, HTTPSamplerProxyWrapper.HTTPSamplerProxyWrapperBuilder> { private String email; public ContactUsPageTemplate(String email) { this.email = email; } @Override protected void prepareBuilder(HTTPSamplerProxyWrapperBuilder builder) { super.prepareBuilder(builder); builder .withMethod(HttpMethod.POST) .addArgument(\"email\", email) .addArgument( \"content\", \"lorem ipsum dolor sit amet consectetur adipiscing elit '..\"); } @Override protected JmcWrapperBuilder<?> init() { return HTTPSamplerProxyWrapper.builder().withPath(\"/contactus\"); } } Copy In this test we add sampler home as contactus with variable 'email'.  TestPlanWrapper testPlanWrapper = TestPlanWrapper.builder() .addThread( ThreadGroupWrapper.builder() .addSampler(new HomePageTemplate()) .addSampler(new ContactUsPageTemplate(\"${email}\")) .build()) .build(); Copy "},{"title":"SimplePageTemplate","type":1,"pageTitle":"Template","url":"docs/users/template#simplepagetemplate","content":"org.anasoid.jmc.core.wrapper.template.samplers.http.SimplePageTemplate is helper to construct template with the following attribute name,domain,path, method Extend Wrapper It's recommended to extend from SimplePageTemplate and use constructor without argument. "},{"title":"SimplePageControllerTemplate","type":1,"pageTitle":"Template","url":"docs/users/template#simplepagecontrollertemplate","content":"org.anasoid.jmc.core.wrapper.template.samplers.http.controller.SimplePageControllerTemplate is a helper that can include HttpSampler in a Controller, the controller is of type RecordingControllerWrapper. The name of controller will be \"{samplername} CTRL\" SimplePageControllerTemplate has 3 methods to override: void prepareSamplerBuilder(HTTPSamplerProxyWrapperBuilder builder) : prepare main sampler, builder is available and can alter sampler.void beforeMainSampler(RecordingControllerWrapperBuilder controller) : called before add man sampler to controller, we Alter controller at this level.void afterMainSampler(RecordingControllerWrapperBuilder controller) : called after add man sampler to controller, we Alter controller at this level. "},{"title":"Wrapper","type":0,"sectionRef":"#","url":"docs/users/Wrapper","content":"","keywords":""},{"title":"Node types","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#node-types","content":"Test Plan : Test Plan has the wrapper TestPlanWrapper.Thread Group : All Thread group implements interface ThreadWrapper.Samplers : All samplers implements interface SamplerWrapper.Logic Controllers : All controller implements interface ControllerWrapper.Listeners : All listeners implements interface SampleListenerWrapper.Configuration Elements : All configuration elements implements interface ConfigElementWrapper.Assertions : All Assertions implements interface AssertionWrapper.Timers : All timers implements interface timers.Pre-Processors :All Pre-Processors implements interface PreProcessorWrapper.Post-Processors : All Post-Processors implements interface PostProcessorWrapper. Builder# JMC is based on Lombok SuperBuilder to generate builder. "},{"title":"Builder","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#builder-1","content":"You can get the builder of component calling the static method builder() on type. "},{"title":"Simple Attribute","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#simple-attribute","content":"In builder all simple attribute has a prefix with*. "},{"title":"Collections Attribute","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#collections-attribute","content":"All list attributes has a prefix add*, to add values to the list value. add{Attributename}( oneValue )add{Attributename}s( listValue ) "},{"title":"Simplified add*","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#simplified-add","content":"For same simple object a simplified add method is present, for example : argument composed by (key, value) we an found the following method addArgument( String key,String value ) "},{"title":"Attributes","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#attributes","content":""},{"title":"childs (AKA children)","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#childs-aka-children","content":"Childs attribute contain the list of children of testElement they are equivalent the children nodes in GUI. addChild/addChilds are not available but depends of node type the correct method is available : Methods\tAvailable foraddThread/addThreads\tTestPlan addController/addController\tThread/Controller addSampler/addSampler\tThread/Controller addConfig/addConfigs\tTestPlan/Thread/Controller/Sampler addPreProcessor/addPreProcessors\tTestPlan/Thread/Controller/Sampler addPostProcessor/addPostProcessors\tTestPlan/Thread/Controller/Sampler addTimer/addTimers\tTestPlan/Thread/Controller/Sampler addListener/addListeners\tTestPlan/Thread/Controller/Sampler addPostProcessor/addPostProcessors\tTestPlan/Thread/Controller/Sampler addTimer/addTimers\tTestPlan/Thread/Controller/Sampler addAssertion/addAssertions\tTestPlan/Thread/Controller/Sampler "},{"title":"Tags","type":1,"pageTitle":"Wrapper","url":"docs/users/Wrapper#tags","content":"Tags are string value that can be used to identify a testElement or group of testElements, they an be used with interceptors "}]